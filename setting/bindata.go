// Code generated by go-bindata. DO NOT EDIT.
// sources:
// setting/configFile/app.toml (1.041kB)
// setting/configFile/app.yaml (947B)

package setting

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _settingConfigfileAppToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x92\x5d\x8b\xd3\x4e\x14\xc6\xef\xf3\x29\x0e\xd9\xdb\xff\xb6\x93\xa6\x4d\x9b\x42\xef\xfe\x37\x2e\x2a\xc2\x2e\xec\x45\x59\xca\x24\x39\xdb\x0c\xa6\x99\x30\x99\x6c\x75\xef\xc4\xdd\xfa\x86\x2c\xac\x68\xd5\xf5\x4a\x58\x14\x41\x8b\x08\x55\xdc\x55\xbf\xcc\xa6\x2f\xdf\x42\x26\x69\x8a\x2d\x7e\x01\xef\xce\xf3\xe4\x37\x67\x9e\x9c\x33\xed\x18\xc5\x01\x8a\x3d\x0d\x20\xaf\x6e\xd2\x1e\x42\x0b\xf4\x43\xff\x6e\xa2\x6b\x00\x11\x17\x52\x69\x9b\xd8\x44\x69\x91\x84\x37\xb8\x97\x21\x1e\x3a\x49\x57\x87\x0d\x10\x18\x20\x8d\x11\x32\x43\x03\x08\x78\xf7\x3a\x1e\x60\xb0\x02\x65\x05\xb0\x70\x9f\x43\x9f\x8a\x10\x50\x08\x2e\x72\xf8\x16\x95\xbe\x62\x45\x12\x4a\xd6\xc3\x72\xc0\xbb\xb1\x3a\x12\x29\x7f\x32\x3c\x4f\x7f\x0d\x27\x2f\x1e\x5c\x5d\x8c\x67\x5f\x47\xe9\xcf\x23\x95\x02\xa9\xb7\xc3\x7a\xc8\x13\x15\xce\x24\xb0\x01\xb3\xd1\xc5\x6c\x7c\x3c\x19\x8e\x61\xfa\xee\x54\x03\xe8\x0b\x26\x71\x8d\x49\x07\xaf\x56\x98\xd8\x4f\xa4\xc7\xfb\xa1\xc2\xa0\x05\x06\x6c\xc0\xd5\xe5\xcb\xf9\xd9\x71\x7a\xef\xcd\xe4\xe3\xdb\xe9\xfb\x27\xe9\xf7\x93\xa2\x1f\x17\xb7\x51\x5c\xfb\x7f\xc1\xcd\xcf\x3e\xcc\x1e\x7f\x9e\x7e\x1a\x4e\xbe\x3c\x4f\x1f\x0e\xd2\x6f\xf7\xd3\xcb\x93\xe9\xeb\xa3\xf4\xc7\xb3\xf4\xd1\xd3\x25\xad\x01\x6c\xf5\xe5\x36\xba\x02\xb3\x31\xba\xb5\x86\x6b\x3a\x14\x9d\x6a\xb5\x61\x3a\x76\xa5\x56\x23\x86\xe9\xa0\x5b\xad\x59\xf5\x86\xe3\x59\xea\xb7\xb7\x76\x77\x20\x1d\x0d\xe6\xa7\xe7\x00\x6a\x0d\x9b\x5d\xbe\x69\x58\x35\xbb\x62\x99\xd5\x0a\xd1\xb4\xb6\x47\x25\x75\x68\x8c\x6a\x6b\x4b\x51\xa2\x4a\x02\xf8\x3c\xce\x6e\x0a\xb8\x4b\x03\x25\xf4\xcc\x2e\xf6\x68\x9a\xc4\xca\x9d\x24\x46\x11\x2e\xb6\x2d\x38\x2f\x38\x1a\xc7\x7d\x2e\x3c\xe5\xe6\x8e\xe7\x14\x94\xc4\xa2\x5b\x8f\xde\xe9\x30\x2f\xc0\x8e\xcb\xc3\x50\x4d\x84\x2c\x6d\x1e\x61\x58\xd8\x66\x6e\x2b\xd5\x51\xdf\x02\xb6\x8f\x32\x9f\xb5\x49\xc8\x4a\x7a\xe7\x9f\x4b\xaf\xb5\x05\x7a\x2c\x56\xb9\xff\x9a\xba\xc8\x6c\x99\x75\x3b\xd3\x6b\xd9\x3c\x07\x5a\x40\x32\x90\x07\xdb\xec\x30\x7b\x81\x59\x5f\x0c\x68\x2c\x99\xfb\x67\x67\x5f\xca\xa8\x59\x2e\x1b\x95\x7a\x89\x94\x48\xc9\x68\xda\x15\x42\xca\xaa\x8d\x1a\x84\x22\x16\x87\xd6\x6f\x2a\x6a\x5d\xd3\xda\x2c\xda\xf5\x99\xcc\x9e\x0d\x8b\xa0\x05\x6d\xbd\xd9\x34\xf4\xff\x40\x5f\xb6\xd5\xf7\x7e\x07\x00\x00\xff\xff\xf7\xcd\x66\xcf\x11\x04\x00\x00")

func settingConfigfileAppTomlBytes() ([]byte, error) {
	return bindataRead(
		_settingConfigfileAppToml,
		"setting/configFile/app.toml",
	)
}

func settingConfigfileAppToml() (*asset, error) {
	bytes, err := settingConfigfileAppTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "setting/configFile/app.toml", size: 1041, mode: os.FileMode(0644), modTime: time.Unix(1677458248, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc3, 0xcb, 0x27, 0x1e, 0x70, 0xc6, 0x9, 0x6, 0x28, 0x76, 0x2e, 0xdf, 0x6, 0x22, 0x45, 0x7f, 0x38, 0x61, 0x7, 0x20, 0xfa, 0x80, 0xcd, 0x91, 0x45, 0xb2, 0xb5, 0xe9, 0xd3, 0xe9, 0xe8, 0x22}}
	return a, nil
}

var _settingConfigfileAppYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\xcf\x6e\xd3\x40\x10\xc6\xef\xfb\x14\x23\xe5\xdc\x66\xed\x4d\xd2\x66\xcf\x5c\x40\x05\x21\xb5\x12\xc7\x6a\x6d\x4f\xe3\x2d\x8e\x37\xec\xae\x6b\xda\x1b\xa2\x2d\xff\x84\x2a\x15\x41\x80\x72\x42\xaa\x40\x48\x50\x21\xa4\x82\x68\x81\x97\xa9\x93\xf4\x2d\xd0\xda\x21\x6d\x88\xe0\x92\xcc\x7c\xf3\xf3\xe7\x4f\x33\x36\xa8\x37\x50\x73\x02\x50\x55\x37\x44\x17\x39\x6c\xc5\x9b\x19\x01\xe8\x29\x6d\x39\xb4\x69\x9b\x12\x00\x9d\xa5\xd7\x55\x84\x1c\x22\x0c\xb2\x0e\xd4\x40\x63\x82\xc2\x60\xd5\x13\x80\x44\x75\x96\x70\x03\x93\x0b\xa2\xfa\x97\xe9\x9a\x82\x5c\xe8\x14\x50\x6b\xa5\x2b\xf2\xa6\xb0\x31\x77\x9e\x56\x76\xb1\x9e\xa8\x8e\x81\x1a\xf4\x84\x8d\x61\xd0\x3f\x2c\x7e\xf5\x07\x2f\x1e\x9c\x9d\x1c\x8f\xbe\x1e\x15\x3f\xb7\xdd\xcb\x51\x44\x2b\xb2\x8b\x2a\xb3\x1c\x18\x85\x1a\x8c\x8e\x4e\x46\xc7\x3b\x83\xfe\x31\x0c\xdf\xed\x13\x80\x5c\x4b\x8b\xd3\x48\xb1\xfb\x6a\x0a\x31\x71\x66\x23\x95\xa7\x8e\xe2\xe0\x41\x0d\xce\x4e\x5f\x9e\x1f\xec\x14\xf7\xde\x0c\x3e\xbe\x1d\xbe\x7f\x52\x7c\xdf\xfb\xe3\xa6\xf4\x6d\xd4\x57\xaf\x54\xd8\xf9\xc1\x87\xd1\xe3\xcf\xc3\x4f\xfd\xc1\x97\xe7\xc5\xc3\xdd\xe2\xdb\xfd\xe2\x74\x6f\xf8\x7a\xbb\xf8\xf1\xac\x78\xf4\x74\x02\x13\x80\xf5\xdc\x2e\x63\xa8\xd1\x72\x08\x9b\x8b\x21\x0b\x04\x06\x8d\xc6\x22\x0b\xda\x7e\xb3\x49\x3d\x16\x60\xd8\x68\xb6\x16\x16\x83\xa8\x05\x35\xb8\x76\x6b\x05\x8a\xa3\xdd\xf3\xfd\x43\x28\x57\x3e\xd7\x51\x73\x5e\xab\xd9\xf6\x5b\xac\xe1\x53\x42\x22\x61\x45\x20\x0c\xba\xf3\xd8\xcd\x1e\x72\xe8\x6e\x9a\x3b\x09\x01\x88\x95\xb1\x1c\x12\x15\x8a\xc4\x95\x93\x5b\x31\x46\x5b\x04\x20\x33\xa8\xd3\xf2\x92\x5a\xa9\x72\x2a\x8c\xc9\x95\x8e\x9c\x53\x14\x54\x23\x8b\xe5\x83\x5d\x71\x77\x55\x46\x09\xae\x86\x2a\x4d\x39\x78\x74\xac\xa9\x1e\xa6\x63\x8d\x39\xcd\x95\xab\x6e\x90\xc8\x35\xb4\xe5\x0a\x19\xa5\xa4\x06\x55\x28\xee\xaa\xd9\x60\xa5\x78\x29\x5b\xd9\xff\x15\xaf\x62\x26\x09\xcb\x76\x2a\x64\xa9\xcc\xe6\x9c\xc8\xd3\x51\x4b\xf9\x1f\x69\x89\xc6\x48\x1a\xfe\x9f\x0d\xb6\xd8\x42\x7b\x66\x61\x1c\x68\x09\xa8\x64\x59\x6e\xb9\x6f\xc7\x59\x61\x22\x8c\x95\xe1\x85\x59\x6c\x6d\x8f\xd7\xeb\x9e\xbf\x30\x4f\xe7\xe9\xbc\xc7\xdb\x3e\xa5\xf5\xf1\x39\x38\x8c\xf9\xcb\xe6\xb0\xb5\xee\xf9\xcc\xf3\x19\x21\x79\x2c\x2d\x2e\x49\x63\x9d\x9f\xec\xb9\x5f\x80\x39\xe0\xdc\x1b\x57\x13\xdb\xdf\x01\x00\x00\xff\xff\x95\x21\x8e\xf1\xb3\x03\x00\x00")

func settingConfigfileAppYamlBytes() ([]byte, error) {
	return bindataRead(
		_settingConfigfileAppYaml,
		"setting/configFile/app.yaml",
	)
}

func settingConfigfileAppYaml() (*asset, error) {
	bytes, err := settingConfigfileAppYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "setting/configFile/app.yaml", size: 947, mode: os.FileMode(0644), modTime: time.Unix(1677458895, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x89, 0xf6, 0xf9, 0x94, 0xc7, 0x31, 0x63, 0xdb, 0x8, 0x2a, 0x7a, 0x61, 0x9a, 0xdd, 0x10, 0xdc, 0x72, 0x48, 0x6a, 0x65, 0xe7, 0x8e, 0x1c, 0x59, 0xbb, 0xa9, 0x21, 0x74, 0x4a, 0xb0, 0xc4, 0xe5}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"setting/configFile/app.toml": settingConfigfileAppToml,
	"setting/configFile/app.yaml": settingConfigfileAppYaml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"setting": {nil, map[string]*bintree{
		"configFile": {nil, map[string]*bintree{
			"app.toml": {settingConfigfileAppToml, map[string]*bintree{}},
			"app.yaml": {settingConfigfileAppYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
