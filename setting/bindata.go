// Code generated by go-bindata. DO NOT EDIT.
// sources:
// setting/configFile/app.toml (1.041kB)
// setting/configFile/app.yaml (947B)

package setting

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _settingConfigfileAppToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x92\x5d\x8b\xd3\x4e\x14\xc6\xef\xf3\x29\x0e\xd9\xdb\xff\xb6\x93\xa6\x4d\x9b\x42\xef\xfe\x37\x2e\x2a\xc2\x2e\xec\x45\x59\xca\x24\x39\xdb\x0c\xa6\x99\x30\x99\x6c\x75\xef\xc4\xdd\xfa\x86\x2c\xac\x68\xd5\xf5\x4a\x58\x14\x41\x8b\x08\x55\xdc\x55\xbf\xcc\xa6\x2f\xdf\x42\x26\x69\x8a\x2d\x7e\x01\xef\xce\xf3\xe4\x37\x67\x9e\x9c\x33\xed\x18\xc5\x01\x8a\x3d\x0d\x20\xaf\x6e\xd2\x1e\x42\x0b\xf4\x43\xff\x6e\xa2\x6b\x00\x11\x17\x52\x69\x9b\xd8\x44\x69\x91\x84\x37\xb8\x97\x21\x1e\x3a\x49\x57\x87\x0d\x10\x18\x20\x8d\x11\x32\x43\x03\x08\x78\xf7\x3a\x1e\x60\xb0\x02\x65\x05\xb0\x70\x9f\x43\x9f\x8a\x10\x50\x08\x2e\x72\xf8\x16\x95\xbe\x62\x45\x12\x4a\xd6\xc3\x72\xc0\xbb\xb1\x3a\x12\x29\x7f\x32\x3c\x4f\x7f\x0d\x27\x2f\x1e\x5c\x5d\x8c\x67\x5f\x47\xe9\xcf\x23\x95\x02\xa9\xb7\xc3\x7a\xc8\x13\x15\xce\x24\xb0\x01\xb3\xd1\xc5\x6c\x7c\x3c\x19\x8e\x61\xfa\xee\x54\x03\xe8\x0b\x26\x71\x8d\x49\x07\xaf\x56\x98\xd8\x4f\xa4\xc7\xfb\xa1\xc2\xa0\x05\x06\x6c\xc0\xd5\xe5\xcb\xf9\xd9\x71\x7a\xef\xcd\xe4\xe3\xdb\xe9\xfb\x27\xe9\xf7\x93\xa2\x1f\x17\xb7\x51\x5c\xfb\x7f\xc1\xcd\xcf\x3e\xcc\x1e\x7f\x9e\x7e\x1a\x4e\xbe\x3c\x4f\x1f\x0e\xd2\x6f\xf7\xd3\xcb\x93\xe9\xeb\xa3\xf4\xc7\xb3\xf4\xd1\xd3\x25\xad\x01\x6c\xf5\xe5\x36\xba\x02\xb3\x31\xba\xb5\x86\x6b\x3a\x14\x9d\x6a\xb5\x61\x3a\x76\xa5\x56\x23\x86\xe9\xa0\x5b\xad\x59\xf5\x86\xe3\x59\xea\xb7\xb7\x76\x77\x20\x1d\x0d\xe6\xa7\xe7\x00\x6a\x0d\x9b\x5d\xbe\x69\x58\x35\xbb\x62\x99\xd5\x0a\xd1\xb4\xb6\x47\x25\x75\x68\x8c\x6a\x6b\x4b\x51\xa2\x4a\x02\xf8\x3c\xce\x6e\x0a\xb8\x4b\x03\x25\xf4\xcc\x2e\xf6\x68\x9a\xc4\xca\x9d\x24\x46\x11\x2e\xb6\x2d\x38\x2f\x38\x1a\xc7\x7d\x2e\x3c\xe5\xe6\x8e\xe7\x14\x94\xc4\xa2\x5b\x8f\xde\xe9\x30\x2f\xc0\x8e\xcb\xc3\x50\x4d\x84\x2c\x6d\x1e\x61\x58\xd8\x66\x6e\x2b\xd5\x51\xdf\x02\xb6\x8f\x32\x9f\xb5\x49\xc8\x4a\x7a\xe7\x9f\x4b\xaf\xb5\x05\x7a\x2c\x56\xb9\xff\x9a\xba\xc8\x6c\x99\x75\x3b\xd3\x6b\xd9\x3c\x07\x5a\x40\x32\x90\x07\xdb\xec\x30\x7b\x81\x59\x5f\x0c\x68\x2c\x99\xfb\x67\x67\x5f\xca\xa8\x59\x2e\x1b\x95\x7a\x89\x94\x48\xc9\x68\xda\x15\x42\xca\xaa\x8d\x1a\x84\x22\x16\x87\xd6\x6f\x2a\x6a\x5d\xd3\xda\x2c\xda\xf5\x99\xcc\x9e\x0d\x8b\xa0\x05\x6d\xbd\xd9\x34\xf4\xff\x40\x5f\xb6\xd5\xf7\x7e\x07\x00\x00\xff\xff\xf7\xcd\x66\xcf\x11\x04\x00\x00")

func settingConfigfileAppTomlBytes() ([]byte, error) {
	return bindataRead(
		_settingConfigfileAppToml,
		"setting/configFile/app.toml",
	)
}

func settingConfigfileAppToml() (*asset, error) {
	bytes, err := settingConfigfileAppTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "setting/configFile/app.toml", size: 1041, mode: os.FileMode(0644), modTime: time.Unix(1678773360, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc3, 0xcb, 0x27, 0x1e, 0x70, 0xc6, 0x9, 0x6, 0x28, 0x76, 0x2e, 0xdf, 0x6, 0x22, 0x45, 0x7f, 0x38, 0x61, 0x7, 0x20, 0xfa, 0x80, 0xcd, 0x91, 0x45, 0xb2, 0xb5, 0xe9, 0xd3, 0xe9, 0xe8, 0x22}}
	return a, nil
}

var _settingConfigfileAppYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x51\x4d\x6f\xd3\x4a\x14\xdd\xcf\xaf\x38\x92\xd7\x6d\xc6\x76\x92\x36\xb3\x7e\x9b\xf7\xd4\x87\x90\x5a\x89\x65\x35\xb6\x6f\x63\x17\xc7\x13\xc6\x93\x86\x76\x87\x68\xcb\x97\x50\xa5\x22\x08\x50\x56\x48\x15\x08\x09\x2a\x84\x54\x10\x2d\xf0\x67\xea\x24\xfd\x17\x68\xec\x90\x36\x54\xb0\xb1\xcf\x3d\xf7\xcc\xb9\x47\xf7\xe6\xa4\x37\x48\x0b\x06\x54\xe8\x9a\xec\x90\xc0\x56\xbc\xd9\x63\x40\x57\x69\x23\xd0\xe2\x2d\xce\x00\xdd\xcb\xfe\x57\x11\x09\x44\x14\xf4\xda\x70\xa0\x29\x25\x99\x53\x55\x33\x20\x55\xed\x25\xda\xa0\xf4\x42\x51\xfd\x93\x6c\x4d\xa1\x2f\x75\x06\xd2\x5a\xe9\x4a\x79\x5d\x9a\x58\x58\x4f\x93\x74\xa8\x96\xaa\x76\x0e\x07\x5d\x69\x62\x0c\x07\x87\xc5\x8f\xc1\xf0\xd9\xbd\xb3\x93\xe3\xf1\xe7\xa3\xe2\xfb\xb6\x1d\x4e\x32\x5a\x49\x3a\xa4\x7a\x46\xc0\xe7\x70\x30\x3e\x3a\x19\x1f\xef\x0c\x07\xc7\x18\xbd\xd9\x67\x40\x5f\x27\x86\x66\x25\xc5\xee\x8b\x19\x49\x1e\xf7\x4c\xa4\xfa\x99\x55\x09\x34\xe0\xe0\xec\xf4\xf9\xf9\xc1\x4e\x71\xe7\xd5\xf0\xfd\xeb\xd1\xdb\x47\xc5\xd7\xbd\x5f\x6e\x4a\xdf\x24\xfd\xef\x3f\x02\x2e\x1c\x9c\x1f\xbc\x1b\x3f\xfc\x38\xfa\x30\x18\x7e\x7a\x5a\xdc\xdf\x2d\xbe\xdc\x2d\x4e\xf7\x46\x2f\xb7\x8b\x6f\x4f\x8a\x07\x8f\xa7\x62\x06\xac\xf7\xcd\x32\x85\x9a\x8c\x40\xd8\x58\x0c\xfd\x40\x52\x50\xaf\x2f\xfa\x41\xcb\x6b\x34\xb8\xeb\x07\x14\xd6\x1b\xcd\x85\xc5\x20\x6a\xc2\xc1\x7f\x37\x56\x50\x1c\xed\x9e\xef\x1f\xa2\x5c\xf9\x5c\x5b\xcd\xb9\xcd\x46\xcb\x6b\xfa\x75\x8f\x33\x16\x49\x23\x03\x99\x93\x3d\x8f\xd9\xec\x92\x40\x67\x33\xbf\x95\x32\x20\x56\xb9\x11\x48\x55\x28\x53\x0b\xa7\xb7\xf2\x7d\xde\x64\x40\x2f\x27\x9d\x95\x97\xd4\x4a\x95\x5d\x99\xe7\x7d\xa5\x23\xeb\x14\x05\x55\xcb\x50\xf9\xb0\x23\x6f\xaf\x26\x51\x4a\xab\xa1\xca\x32\x01\x97\x4f\x38\xd5\xa5\x6c\xc2\xf9\x96\xb3\x70\xd5\x36\xd2\x64\x8d\x4c\xb9\x42\x9f\x73\xe6\xa0\x0a\x25\x2c\xba\x1a\xac\x24\x2f\x65\x2b\xeb\xdf\xe2\x55\x9a\x69\xc2\xb2\x9c\x09\x59\x32\x57\x73\x4e\xe9\xd9\xa8\x25\xfd\x87\xb4\x4c\x53\x94\xe4\xe2\x2f\x1b\x6c\xfa\x0b\xad\x2b\x0b\x13\xe0\xa5\x40\xa5\xcb\xc9\x16\xd9\xe1\x9c\x31\x4a\x65\x6e\x92\xf0\xc2\x2c\x36\xa6\x2b\x6a\x35\xd7\x5b\x98\xe7\xf3\x7c\xde\x15\x2d\x8f\xf3\xda\xe4\x1c\x02\x13\xfd\x65\x73\x6c\xad\xbb\x9e\xef\x7a\x3e\x63\xfd\x38\x31\xb4\x94\xe4\xc6\xfa\x25\x5d\xfb\x05\xe6\x20\x84\x3b\x41\x53\xdb\x9f\x01\x00\x00\xff\xff\x9b\x89\x9b\x97\xb3\x03\x00\x00")

func settingConfigfileAppYamlBytes() ([]byte, error) {
	return bindataRead(
		_settingConfigfileAppYaml,
		"setting/configFile/app.yaml",
	)
}

func settingConfigfileAppYaml() (*asset, error) {
	bytes, err := settingConfigfileAppYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "setting/configFile/app.yaml", size: 947, mode: os.FileMode(0644), modTime: time.Unix(1678775123, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x24, 0xc3, 0xdc, 0x5f, 0x55, 0x86, 0x95, 0xe3, 0xd4, 0x20, 0x86, 0xc6, 0x75, 0xcd, 0xbd, 0xdf, 0xfb, 0xa6, 0xc9, 0x47, 0x70, 0xe7, 0xbe, 0xb5, 0xf2, 0x9f, 0xed, 0x29, 0x3e, 0x26, 0xbc, 0x8a}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"setting/configFile/app.toml": settingConfigfileAppToml,
	"setting/configFile/app.yaml": settingConfigfileAppYaml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"setting": {nil, map[string]*bintree{
		"configFile": {nil, map[string]*bintree{
			"app.toml": {settingConfigfileAppToml, map[string]*bintree{}},
			"app.yaml": {settingConfigfileAppYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
